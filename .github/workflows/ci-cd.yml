name: CI/CD Pipeline

on:
  workflow_dispatch:  # Allows manual trigger
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: 'jeromejay09/demo-app:pos-1.0'
  DOCKER_CONTENT_TRUST: '1'
  CHECKSTYLE_CONFIG: 'checkstyle.xml'

jobs:
  pipeline:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Run Ansible
    - name: Run Ansible
      run: |
        cd Ansible
        ansible-playbook -i localhost, playbook.yaml --connection=local

    # Step 3: Scan for sensitive data
    - name: Scan for sensitive data with git-secrets
      run: |
        git secrets --scan

    # Step 4: Retrieve AWS Secret
    - name: Retrieve Docker Registry Credentials from AWS Secrets Manager
      id: aws-secrets
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
        args: |
          secretsmanager get-secret-value --secret-id docker-registry-credentials --query 'SecretString' --output text
      env:
        AWS_REGION: ap-southeast-2

    - name: Parse AWS Secret
      run: |
        echo "$SECRET_STRING" | jq -r .username > username.txt
        echo "$SECRET_STRING" | jq -r .password > password.txt
      env:
        SECRET_STRING: ${{ steps.aws-secrets.outputs.stdout }}

    # Step 5: Static Code Analysis with SonarQube
    - name: Static Code Analysis with SonarQube
      run: |
        mvn clean install
        mvn sonar:sonar \
          -Dsonar.host.url=http://52.62.205.253:9000 \
          -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }} \
          -Dsonar.java.binaries=target/classes

    # Step 6: Code Quality with Checkstyle
    - name: Code Quality with Checkstyle
      run: mvn checkstyle:checkstyle

    # Step 7: Dependency Scanning with Trivy
    - name: Dependency Scanning with Trivy
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: fs
        severity: HIGH,CRITICAL

    # Step 8: Build Java Application
    - name: Build Java Application
      run: mvn clean package -DskipTests
      
    # Step 9: Build Java Application
    - name: Setup GPG Key and Sign
      run: |
        # Create the GPG home directory and set permissions
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg

        # Set GNUPGHOME environment variable
        export GNUPGHOME=$(mktemp -d)

        # Import the GPG key (handling line endings with base64)
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --import

        # Check if the import was successful
        if [[ $? -ne 0 ]]; then
          echo "GPG key import failed!"
          exit 1
        fi

         # List imported keys (for debugging)
        gpg --list-secret-keys

        # Sign the JAR - Use --default-key and ensure correct passphrase handling
        gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" --default-key $(gpg --list-secret-keys --with-colons | grep ^sec | cut -d: -f5) -o target/pos-system-1.0.0.jar -a --detach-sig target/pos-system-1.0.0.jar

        #Clean up GPG Home
        rm -rf "$GNUPGHOME"
      shell: bash
      
    # Step 10: Build Docker Image
    - name: Build Docker Image
      run: docker build -t $DOCKER_IMAGE .

    # Step 11: Trivy Security Check
    - name: Trivy Security Check
      run: |
        trivy image --exit-code 0 --severity HIGH,CRITICAL $DOCKER_IMAGE

    # Step 12: Sign Docker Image
    - name: Sign Docker Image
      run: |
        export DOCKER_CONTENT_TRUST=1
        docker trust sign $DOCKER_IMAGE

    # Step 13: Push Docker Image
    - name: Push Docker Image
      run: |
        export DOCKER_CONTENT_TRUST=0
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push $DOCKER_IMAGE
