pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'user01/demo-01:latest'
        EC2_USER = 'ec2-user'  // Change to your EC2 user
        EC2_HOST = 'your-ec2-public-ip'
        EC2_KEY = credentials('ec2-key')
        DOCKER_REGISTRY = 'docker.io'
        AWS_REGION = 'us-east-1'
        AWS_ECR_REPO = 'your-ecr-repo'
        SONARQUBE_TOKEN = credentials('sonarqube-token')  // SonarQube token for static analysis
        SNYK_TOKEN = credentials('snyk-token')  // Snyk token for dependency scanning
        CHECKSTYLE_CONFIG = 'checkstyle.xml'  // Path to Checkstyle config file
        GPG_KEY = credentials('gpg-private-key')  // GPG private key for signing
        GPG_PASSPHRASE = credentials('gpg-passphrase')  // GPG passphrase
        AWS_SECRETS_MANAGER = 'dockerhub-credentials'  // Name of the AWS Secrets Manager secret
        DOCKER_CONTENT_TRUST = '1'  // Enable Docker Content Trust (DCT)
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-repo/demo-01.git'
            }
        }

        stage('Scan for Sensitive Data with git-secrets') {
            steps {
                script {
                    // Install git-secrets if it's not already installed
                    sh 'git secrets --install'
                    // Run git-secrets to scan for any secrets
                    sh 'git secrets --scan'
                }
            }
        }

        stage('Retrieve AWS Secrets') {
            steps {
                script {
                    // Retrieve secrets from AWS Secrets Manager (e.g., Docker Hub credentials)
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                            # Retrieve the Docker Hub credentials from AWS Secrets Manager
                            DOCKER_USERNAME=$(aws secretsmanager get-secret-value --secret-id $AWS_SECRETS_MANAGER --query 'SecretString' --output text | jq -r .username)
                            DOCKER_PASSWORD=$(aws secretsmanager get-secret-value --secret-id $AWS_SECRETS_MANAGER --query 'SecretString' --output text | jq -r .password)
                        '''
                    }
                }
            }
        }

        stage('Static Code Analysis with SonarQube') {
            steps {
                script {
                    sh 'mvn sonar:sonar -Dsonar.host.url=http://your-sonarqube-server -Dsonar.login=$SONARQUBE_TOKEN'
                }
            }
        }

        stage('Code Quality with Checkstyle') {
            steps {
                script {
                    // Run Checkstyle for Java code to enforce coding standards
                    sh 'mvn checkstyle:checkstyle'
                }
            }
        }

        stage('Dependency Scanning with Snyk') {
            steps {
                script {
                    // Install Snyk if not already installed
                    sh 'npm install -g snyk'  // Assuming Snyk is being used for the scan
                    // Run the Snyk test to scan for vulnerabilities in dependencies
                    sh 'snyk test --all-projects --org=your-org-name'
                }
            }
        }

        stage('Build Java App') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('GPG Sign the JAR File') {
            steps {
                script {
                    // Sign the JAR file using GPG
                    sh '''
                        export GPG_KEY_PATH="${WORKSPACE}/gpg/private.key"
                        echo "$GPG_KEY" > $GPG_KEY_PATH
                        gpg --import $GPG_KEY_PATH
                        gpg --batch --yes --passphrase "$GPG_PASSPHRASE" -o target/demo-01.jar.asc -a --detach-sig target/demo-01.jar
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Trivy Security Check') {
            steps {
                // Run Trivy security scan on the built Docker image
                sh 'trivy image --exit-code 1 --severity HIGH,CRITICAL $DOCKER_IMAGE'
            }
        }

        stage('Sign Docker Image') {
            steps {
                // This step is needed to sign the image using Docker Content Trust (DCT)
                sh """
                    docker trust sign $DOCKER_IMAGE
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                withDockerRegistry([credentialsId: 'dockerhub-credentials', url: 'https://index.docker.io/v1/']) {
                    // Enable Docker Content Trust (DCT) to sign the image before pushing
                    sh 'DOCKER_CONTENT_TRUST=1 docker push $DOCKER_IMAGE'
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sh """
                    ssh -i $EC2_KEY $EC2_USER@$EC2_HOST << EOF
                    DOCKER_CONTENT_TRUST=1 docker pull $DOCKER_IMAGE
                    docker stop my-app || true
                    docker rm my-app || true
                    docker run -d --name my-app -p 80:8080 $DOCKER_IMAGE
                    EOF
                """
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}